// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// CreateNote implements createNote operation.
	//
	// Create a note.
	//
	// POST /notes
	CreateNote(ctx context.Context, req *Note) (CreateNoteRes, error)
	// CreateUser implements createUser operation.
	//
	// Create a user.
	//
	// POST /users
	CreateUser(ctx context.Context, req *User) (CreateUserRes, error)
	// DeleteNote implements deleteNote operation.
	//
	// Delete a note.
	//
	// DELETE /note/{noteId}
	DeleteNote(ctx context.Context, params DeleteNoteParams) (DeleteNoteRes, error)
	// DeleteUser implements deleteUser operation.
	//
	// Delete a user.
	//
	// DELETE /user/{userId}
	DeleteUser(ctx context.Context, params DeleteUserParams) (DeleteUserRes, error)
	// GetNote implements getNote operation.
	//
	// Get a note.
	//
	// GET /note/{noteId}
	GetNote(ctx context.Context, params GetNoteParams) (GetNoteRes, error)
	// GetNotes implements getNotes operation.
	//
	// Get all notes.
	//
	// GET /notes
	GetNotes(ctx context.Context) (GetNotesRes, error)
	// GetUser implements getUser operation.
	//
	// Get a user.
	//
	// GET /user/{userId}
	GetUser(ctx context.Context, params GetUserParams) (GetUserRes, error)
	// GetUsers implements getUsers operation.
	//
	// Get all users.
	//
	// GET /users
	GetUsers(ctx context.Context) (GetUsersRes, error)
	// UpdateNote implements updateNote operation.
	//
	// Update a note.
	//
	// PUT /note/{noteId}
	UpdateNote(ctx context.Context, req *Note, params UpdateNoteParams) (UpdateNoteRes, error)
	// UpdateUser implements updateUser operation.
	//
	// Update a user.
	//
	// PUT /user/{userId}
	UpdateUser(ctx context.Context, req *UpdateUser, params UpdateUserParams) (UpdateUserRes, error)
	// NewError creates *CommonErrorStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *CommonErrorStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
